#!/bin/bash
#
# This script tars up a directory to a specific location while ignoring
# easily reconstructed folders like 'node_modules'.
#
# If no directory or backup option is set, it will default to the
# current working directory. Options need to be full path (tilde '~' won't work)
#
# Options:
#
#	  -d|--directory   The directory to backup
#   -b|--backup      The backup path
#
# Example: backup-roots-project -b=/full/path/to/dir -d=/full/path/to/backup/location
#

# Parse arguments
for i in "$@"
do
	case $i in
		-d=*|--directory=*)
			directory="${i#*=}"
			shift
		;;
		-b=*|--backup=*)
			backup_dir="${i#*=}"
			shift
		;;
		*)
			echo "Unkown Option: ${i}"
		;;
	esac
done

# Set Defaults
if [ -z ${directory+x} ]; then
  directory=${PWD}
fi
if [ -z ${backup_dir+x} ]; then
	backup_dir=${PWD}
fi

cd $directory

# Trims directory to only the current directory name
current_dir_name=${PWD##*/}

# # Timestamp for record keeping
now=`date +%Y-%m-%d--%H-%M-%S`

backup_name=${current_dir_name}__${now}.tar.gz
echo "Backing up $backup_name"

# Create backup file to avoid tar 'changed as we read it' error
touch "${backup_name}"

# Tar it up!
tar czf $backup_name --exclude='node_modules' --exclude="$backup_name" --exclude="${current_dir_name}__*.tar.gz" ./

# Only move backup if we need to
if [ ! ${backup_dir} == ${PWD} ]; then
	echo "Moving ${backup_name} to ${backup_dir}"
	mv $backup_name $backup_dir/
fi

