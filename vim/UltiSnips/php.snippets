#
# Default PHP Snippets
#

snippet php
<?php

$0
endsnippet

snippet if "PHP IF Control Structure"
if (${1:condition}) {
	${0}
}

endsnippet

snippet t
$this->${0}
endsnippet

snippet spr
return sprintf(
	'$1',
	$0
);
endsnippet

snippet class
class $1 ${2:extends ${3:parentClass} }{
	$0
}

endsnippet

snippet construct
${1:public} function __construct() {
	$0
}
endsnippet

snippet met "Class Method"
${1:public} function $2(${3}) {
	$0
}
endsnippet

snippet prop
${1:public} $${2:var}${0};
endsnippet

#
# Testing Snippets
#
# PHPSpec
#
snippet it "PHPSpec Method"
function it_${1:description}()
{
	${0}
}
endsnippet

#
# WordPress
#
snippet btaction
function $2() {
	$0
}
add_action('$1', '$2');
endsnippet

snippet btfilter
function $2($$3) {
	$0
	return $$3;
}
add_filter('$1', '$2');
endsnippet


snippet btshortcode
function $2( $atts ) {
	$atts = shortcode_atts( array(
		$0
	), $atts, '$1');
	return ;
}
add_shortcode('$1', '$2');
endsnippet

snippet btsprintf
$1 sprintf(
	$2
);
endsnippet

snippet shortcodeatts
$${3:a} = shortcode_atts( array(
	'${1:attribute_slug}' => '${2:Default Value}',
), $atts );
${0}
endsnippet

snippet pluginheading "Plugin File Heading"
<?php
/**
 * The ${1:Plugin Name} plugin bootstrap file
 *
 * This file is read by WordPress to generate the plugin information in the plugin
 * admin area. This file also includes all of the dependencies used by the plugin,
 * registers the activation and deactivation functions, and defines a function
 * that starts the plugin.
 *
 * @link              ${4:http://passionsplay.com}
 * @since             ${8:0.0.1}
 * @package           ${7:Package_Name}
 *
 * @wordpress-plugin
 * Plugin Name:       $1
 * Description:       ${2:Description}
 * Version:           $8
 * Author:            ${3:Benjamin Turner}
 * Author URI:        $4
 * Plugin URI:        ${5:http://passionsplay.com/plugins}
 * Text Domain:       ${6:text-domain}
 * Domain Path:       /languages
 */

// If this file is called directly, abort.
if ( ! defined( 'WPINC' ) ) {
		die;
}

${0}
endsnippet

snippet posttype "Register a Custom Post Type"
// Custom Post Type: ${1:name}
$labels = array(
	'name'                => __( '${2:$1 CPT Name}', '${4:text_domain}' ),
	'singular_name'       => __( '${3:Singular Name}', '$4' ),
	'menu_name'           => __( '$2', '$4' ),
	'parent_item_colon'   => __( 'Parent $3:', '$4' ),
	'all_items'           => __( 'All $2', '$4' ),
	'view_item'           => __( 'View $3', '$4' ),
	'add_new_item'        => __( 'Add New $3', '$4' ),
	'add_new'             => __( 'Add New', '$4' ),
	'edit_item'           => __( 'Edit $3', '$4' ),
	'update_item'         => __( 'Update $3', '$4' ),
	'search_items'        => __( 'Search $3', '$4' ),
	'not_found'           => __( 'Not found', '$4' ),
	'not_found_in_trash'  => __( 'Not found in Trash', '$4' ),
);
$args = array(
	'label'                 => $labels,
	'description'           => __( '${5:$1 description}', '$4' ),
	'labels'                => $labels,
	'supports'              => array( ${6:'title', 'editor',} ),
	'public'                => true,
	'show_ui'               => true,
	'show_in_menu'          => true,
	'show_in_nav_menus'     => true,
	'show_in_admin_bar'     => true,
	'can_export'            => true,
	'publicly_queryable'    => true,
	'show_in_rest'          => true,
	'rest_base'             => '$1',
	'rest_controller_class' => 'WP_REST_Posts_Controller',
);
register_post_type( '$1', $args );
${0}
endsnippet

snippet metaboxaction
add_action('add_meta_boxes_${1:post_type}', ${2:array($this, '${3:method_name}')});
endsnippet

snippet metabox
add_meta_box( '${1:id}', '${2:Title}', '${3:Render Callback}', '${4:screen, ie post_type}', '${5:context - normal|side|advanced }', '${6:priority - default|low|high}'${7:, callback_args});
endsnippet

